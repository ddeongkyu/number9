{"ast":null,"code":"const INCREASE = \"counter/INCREASE\";\nconst DECREASE = \"counter/DECREASE\";\nconst INCREASE_BY = \"counter/INCREASE_BY\";\nexport const increase = () => ({\n  type: INCREASE\n});\nexport const decrease = () => ({\n  type: DECREASE\n});\nexport const increaseBy = diff => ({\n  type: INCREASE_BY,\n  payload: diff\n});\nconst initialState = {\n  count: 0\n};\n\nfunction counter() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREASE:\n      return {\n        count: state.count + 1\n      };\n\n    case DECREASE:\n      return {\n        count: state.count - 1\n      };\n\n    case INCREASE_BY:\n      return {\n        count: state.count + action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["/Users/hongseong-gyu/ts-react-redux-tutorial/src/Modules/counter.ts"],"names":["INCREASE","DECREASE","INCREASE_BY","increase","type","decrease","increaseBy","diff","payload","initialState","count","counter","state","action"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kBAAjB;AACA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,WAAW,GAAG,qBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEJ;AAAR,CAAP,CAAjB;AACP,OAAO,MAAMK,QAAQ,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAAjB;AACP,OAAO,MAAMK,UAAU,GAAIC,IAAD,KAAmB;AAC3CH,EAAAA,IAAI,EAAEF,WADqC;AAE3CM,EAAAA,OAAO,EAAED;AAFkC,CAAnB,CAAnB;AASP,MAAME,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AAD0B,CAAnC;;AASA,SAASC,OAAT,GAGgB;AAAA,MAFdC,KAEc,uEAFQH,YAER;AAAA,MADdI,MACc;;AACd,UAAQA,MAAM,CAACT,IAAf;AACE,SAAKJ,QAAL;AACE,aAAO;AAAEU,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAKT,QAAL;AACE,aAAO;AAAES,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAKR,WAAL;AACE,aAAO;AAAEQ,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACL;AAA9B,OAAP;;AACF;AACE,aAAOI,KAAP;AARJ;AAUD;;AAED,eAAeD,OAAf","sourcesContent":["const INCREASE = \"counter/INCREASE\" as const;\nconst DECREASE = \"counter/DECREASE\" as const;\nconst INCREASE_BY = \"counter/INCREASE_BY\" as const;\n\nexport const increase = () => ({ type: INCREASE });\nexport const decrease = () => ({ type: DECREASE });\nexport const increaseBy = (diff: number) => ({\n  type: INCREASE_BY,\n  payload: diff,\n});\n\ntype CounterState = {\n  count: number;\n};\n\nconst initialState: CounterState = {\n  count: 0,\n};\n\ntype CounterAction =\n  | ReturnType<typeof increase> // 함수의 결과물의 타입을 가져온다\n  | ReturnType<typeof decrease>\n  | ReturnType<typeof increaseBy>;\n\nfunction counter(\n  state: CounterState = initialState,\n  action: CounterAction\n): CounterState {\n  switch (action.type) {\n    case INCREASE:\n      return { count: state.count + 1 };\n    case DECREASE:\n      return { count: state.count - 1 };\n    case INCREASE_BY:\n      return { count: state.count + action.payload };\n    default:\n      return state;\n  }\n}\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}