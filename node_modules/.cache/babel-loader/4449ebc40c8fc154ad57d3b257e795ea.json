{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\n\nfunction isPayloadAction(action) {\n  return action.payload !== undefined;\n}\n\nexport default function createAsyncSaga(asyncActionCreator, promiseCreator) {\n  return function* saga(action) {\n    try {\n      const result = isPayloadAction(action) ? yield call(promiseCreator, action.payload) : yield call(promiseCreator);\n      yield put(asyncActionCreator.success(result));\n    } catch (e) {\n      yield put(asyncActionCreator.failure(e));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/hongseong-gyu/ts-react-redux-tutorial/src/lib/createAsyncSaga.ts"],"names":["call","put","isPayloadAction","action","payload","undefined","createAsyncSaga","asyncActionCreator","promiseCreator","saga","result","success","e","failure"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;;AAKA,SAASC,eAAT,CAAyBC,MAAzB,EAA4E;AAC1E,SAAOA,MAAM,CAACC,OAAP,KAAmBC,SAA1B;AACD;;AAED,eAAe,SAASC,eAAT,CACbC,kBADa,EAEbC,cAFa,EAGb;AACA,SAAO,UAAUC,IAAV,CAAeN,MAAf,EAAsE;AAC3E,QAAI;AACF,YAAMO,MAAU,GAAGR,eAAe,CAACC,MAAD,CAAf,GACf,MAAMH,IAAI,CAACQ,cAAD,EAAiBL,MAAM,CAACC,OAAxB,CADK,GAEf,MAAMJ,IAAI,CAACQ,cAAD,CAFd;AAGA,YAAMP,GAAG,CAACM,kBAAkB,CAACI,OAAnB,CAA2BD,MAA3B,CAAD,CAAT;AACD,KALD,CAKE,OAAOE,CAAP,EAAe;AACf,YAAMX,GAAG,CAACM,kBAAkB,CAACM,OAAnB,CAA2BD,CAA3B,CAAD,CAAT;AACD;AACF,GATD;AAUD","sourcesContent":["import { AsyncActionCreator, PayloadAction } from \"typesafe-actions\";\nimport { call, put } from \"redux-saga/effects\";\ntype PromiseCreatorFunction<P, T> =\n  | ((payload: P) => Promise<T>)\n  | (() => Promise<T>);\n\nfunction isPayloadAction(action: any): action is PayloadAction<string, any> {\n  return action.payload !== undefined;\n}\n\nexport default function createAsyncSaga<T1, P1, T2, P2, T3, P3>(\n  asyncActionCreator: AsyncActionCreator<[T1, P1], [T2, P2], [T3, P3]>,\n  promiseCreator: PromiseCreatorFunction<P1, P2>\n) {\n  return function* saga(action: ReturnType<typeof asyncActionCreator.request>) {\n    try {\n      const result: P2 = isPayloadAction(action)\n        ? yield call(promiseCreator, action.payload)\n        : yield call(promiseCreator);\n      yield put(asyncActionCreator.success(result));\n    } catch (e: any) {\n      yield put(asyncActionCreator.failure(e));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}