{"ast":null,"code":"export default function createAsyncThunk(asyncActionCreator, promiseCreator) {\n  return function thunk() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    return async dispatch => {\n      const {\n        request,\n        success,\n        failure\n      } = asyncActionCreator;\n      dispatch(request(undefined));\n\n      try {\n        const result = await promiseCreator(...params);\n        dispatch(success(result));\n      } catch (e) {\n        dispatch(failure(e));\n      }\n    };\n  };\n}","map":{"version":3,"sources":["/Users/hongseong-gyu/ts-react-redux-tutorial/src/lib/createAsyncThunk.ts"],"names":["createAsyncThunk","asyncActionCreator","promiseCreator","thunk","params","dispatch","request","success","failure","undefined","result","e"],"mappings":"AAKA,eAAe,SAASA,gBAAT,CAGbC,kBAHa,EAGUC,cAHV,EAG6B;AAE1C,SAAO,SAASC,KAAT,GAAkC;AAAA,sCAAhBC,MAAgB;AAAhBA,MAAAA,MAAgB;AAAA;;AACvC,WAAO,MAAOC,QAAP,IAA8B;AACnC,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,OAAX;AAAoBC,QAAAA;AAApB,UAAgCP,kBAAtC;AACAI,MAAAA,QAAQ,CAACC,OAAO,CAACG,SAAD,CAAR,CAAR;;AACA,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMR,cAAc,CAAC,GAAGE,MAAJ,CAAnC;AACAC,QAAAA,QAAQ,CAACE,OAAO,CAACG,MAAD,CAAR,CAAR;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVN,QAAAA,QAAQ,CAACG,OAAO,CAACG,CAAD,CAAR,CAAR;AACD;AACF,KATD;AAUD,GAXD;AAYD","sourcesContent":["import { Dispatch } from \"redux\";\nimport { AsyncActionCreator } from \"typesafe-actions\";\n\ntype AnyAsyncActionCreator = AsyncActionCreator<any, any, any>;\ntype AnyPromiseCreator = (...params: any[]) => Promise<any>;\nexport default function createAsyncThunk<\n  A extends AnyAsyncActionCreator,\n  F extends AnyPromiseCreator\n>(asyncActionCreator: A, promiseCreator: F) {\n  type Params = Parameters<F>;\n  return function thunk(...params: Params) {\n    return async (dispatch: Dispatch) => {\n      const { request, success, failure } = asyncActionCreator;\n      dispatch(request(undefined));\n      try {\n        const result = await promiseCreator(...params);\n        dispatch(success(result));\n      } catch (e) {\n        dispatch(failure(e));\n      }\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}