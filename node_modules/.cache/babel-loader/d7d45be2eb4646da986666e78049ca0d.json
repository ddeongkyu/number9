{"ast":null,"code":"import { createReducer, createAction } from \"typesafe-actions\";\nconst INCREASE = \"counter/INCREASE\";\nconst DECREASE = \"counter/DECREASE\";\nconst INCREASE_BY = \"counter/INCREASE_BY\";\nexport const increase = createAction(INCREASE)();\nexport const decrease = createAction(DECREASE)();\nexport const increaseBy = createAction(INCREASE_BY)();\nconst initialState = {\n  count: 0\n};\nconst actions = {\n  increase,\n  decrease,\n  increaseBy\n};\nconst counter = createReducer(initialState, {\n  [INCREASE]: state => ({\n    count: state.count + 1\n  }),\n  [DECREASE]: state => ({\n    count: state.count - 1\n  }),\n  [INCREASE_BY]: (state, action) => ({\n    count: state.count + action.payload\n  })\n}); // | ReturnType<typeof increase> // 함수의 결과물의 타입을 가져온다\n// | ReturnType<typeof decrease>\n// | ReturnType<typeof increaseBy>;\n// function counter(\n//   state: CounterState = initialState,\n//   action: CounterAction\n// ): CounterState {\n//   switch (action.type) {\n//     case INCREASE:\n//       return { count: state.count + 1 };\n//     case DECREASE:\n//       return { count: state.count - 1 };\n//     case INCREASE_BY:\n//       return { count: state.count + action.payload };\n//     default:\n//       return state;\n//   }\n// }\n\nexport default counter;","map":{"version":3,"sources":["/Users/hongseong-gyu/ts-react-redux-tutorial/src/Modules/counter.ts"],"names":["createReducer","createAction","INCREASE","DECREASE","INCREASE_BY","increase","decrease","increaseBy","initialState","count","actions","counter","state","action","payload"],"mappings":"AAAA,SAAqBA,aAArB,EAAoCC,YAApC,QAAwD,kBAAxD;AAEA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,QAAQ,GAAG,kBAAjB;AACA,MAAMC,WAAW,GAAG,qBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAGJ,YAAY,CAACC,QAAD,CAAZ,EAAjB;AACP,OAAO,MAAMI,QAAQ,GAAGL,YAAY,CAACE,QAAD,CAAZ,EAAjB;AACP,OAAO,MAAMI,UAAU,GAAGN,YAAY,CAACG,WAAD,CAAZ,EAAnB;AAMP,MAAMI,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AAD0B,CAAnC;AAIA,MAAMC,OAAO,GAAG;AAAEL,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAhB;AAIA,MAAMI,OAAO,GAAGX,aAAa,CAA8BQ,YAA9B,EAA4C;AACvE,GAACN,QAAD,GAAaU,KAAD,KAAY;AAAEH,IAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAAvB,GAAZ,CAD2D;AAEvE,GAACN,QAAD,GAAaS,KAAD,KAAY;AAAEH,IAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAAvB,GAAZ,CAF2D;AAGvE,GAACL,WAAD,GAAe,CAACQ,KAAD,EAAQC,MAAR,MAAoB;AAAEJ,IAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC;AAA9B,GAApB;AAHwD,CAA5C,CAA7B,C,CAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,OAAf","sourcesContent":["import { ActionType, createReducer, createAction } from \"typesafe-actions\";\n\nconst INCREASE = \"counter/INCREASE\";\nconst DECREASE = \"counter/DECREASE\";\nconst INCREASE_BY = \"counter/INCREASE_BY\";\n\nexport const increase = createAction(INCREASE)();\nexport const decrease = createAction(DECREASE)();\nexport const increaseBy = createAction(INCREASE_BY)<number>();\n\ntype CounterState = {\n  count: number;\n};\n\nconst initialState: CounterState = {\n  count: 0,\n};\n\nconst actions = { increase, decrease, increaseBy };\n\ntype CounterAction = ActionType<typeof actions>;\n\nconst counter = createReducer<CounterState, CounterAction>(initialState, {\n  [INCREASE]: (state) => ({ count: state.count + 1 }),\n  [DECREASE]: (state) => ({ count: state.count - 1 }),\n  [INCREASE_BY]: (state, action) => ({ count: state.count + action.payload }),\n});\n// | ReturnType<typeof increase> // 함수의 결과물의 타입을 가져온다\n// | ReturnType<typeof decrease>\n// | ReturnType<typeof increaseBy>;\n\n// function counter(\n//   state: CounterState = initialState,\n//   action: CounterAction\n// ): CounterState {\n//   switch (action.type) {\n//     case INCREASE:\n//       return { count: state.count + 1 };\n//     case DECREASE:\n//       return { count: state.count - 1 };\n//     case INCREASE_BY:\n//       return { count: state.count + action.payload };\n//     default:\n//       return state;\n//   }\n// }\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}